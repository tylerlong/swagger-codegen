using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
           instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<DefaultApi> (instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test RestapiGet
        /// </summary>
        [Test]
        public void RestapiGetTest()
        {
            // TODO: add unit test for the method 'RestapiGet'
            
            var response = instance.RestapiGet();
            Assert.IsInstanceOf<ServerInfo> (response, "response is ServerInfo"); 
        }
        
        /// <summary>
        /// Test RestapiOauthAuthorizePost
        /// </summary>
        [Test]
        public void RestapiOauthAuthorizePostTest()
        {
            // TODO: add unit test for the method 'RestapiOauthAuthorizePost'
            Body body = null; // TODO: replace null with proper value
            
            var response = instance.RestapiOauthAuthorizePost(body);
            Assert.IsInstanceOf<InlineResponseDefault> (response, "response is InlineResponseDefault"); 
        }
        
        /// <summary>
        /// Test RestapiOauthRevokePost
        /// </summary>
        [Test]
        public void RestapiOauthRevokePostTest()
        {
            // TODO: add unit test for the method 'RestapiOauthRevokePost'
            Body1 body = null; // TODO: replace null with proper value
            
            instance.RestapiOauthRevokePost(body);
             
        }
        
        /// <summary>
        /// Test RestapiOauthTokenPost
        /// </summary>
        [Test]
        public void RestapiOauthTokenPostTest()
        {
            // TODO: add unit test for the method 'RestapiOauthTokenPost'
            Body2 body = null; // TODO: replace null with proper value
            
            var response = instance.RestapiOauthTokenPost(body);
            Assert.IsInstanceOf<InlineResponseDefault1> (response, "response is InlineResponseDefault1"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdActiveCallsGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdActiveCallsGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdActiveCallsGet'
            string accountId = null; // TODO: replace null with proper value
            string direction = null; // TODO: replace null with proper value
            string type = null; // TODO: replace null with proper value
            int? page = null; // TODO: replace null with proper value
            int? perPage = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdActiveCallsGet(accountId, direction, type, page, perPage);
            Assert.IsInstanceOf<InlineResponseDefault2> (response, "response is InlineResponseDefault2"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdBusinessAddressGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdBusinessAddressGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdBusinessAddressGet'
            string accountId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdBusinessAddressGet(accountId);
            Assert.IsInstanceOf<InlineResponseDefault3> (response, "response is InlineResponseDefault3"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdCallLogCallLogIdGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdCallLogCallLogIdGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdCallLogCallLogIdGet'
            string accountId = null; // TODO: replace null with proper value
            int? callLogId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdCallLogCallLogIdGet(accountId, callLogId);
            Assert.IsInstanceOf<CallLogInfo> (response, "response is CallLogInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdCallLogGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdCallLogGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdCallLogGet'
            string accountId = null; // TODO: replace null with proper value
            string extensionNumber = null; // TODO: replace null with proper value
            string phoneNumber = null; // TODO: replace null with proper value
            string direction = null; // TODO: replace null with proper value
            string type = null; // TODO: replace null with proper value
            string view = null; // TODO: replace null with proper value
            bool? withRecording = null; // TODO: replace null with proper value
            DateTime? dateFrom = null; // TODO: replace null with proper value
            DateTime? dateTo = null; // TODO: replace null with proper value
            int? page = null; // TODO: replace null with proper value
            int? perPage = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdCallLogGet(accountId, extensionNumber, phoneNumber, direction, type, view, withRecording, dateFrom, dateTo, page, perPage);
            Assert.IsInstanceOf<InlineResponseDefault2> (response, "response is InlineResponseDefault2"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdActiveCallsGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdActiveCallsGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdActiveCallsGet'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            string direction = null; // TODO: replace null with proper value
            string type = null; // TODO: replace null with proper value
            int? page = null; // TODO: replace null with proper value
            int? perPage = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdActiveCallsGet(accountId, extensionId, direction, type, page, perPage);
            Assert.IsInstanceOf<InlineResponseDefault2> (response, "response is InlineResponseDefault2"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGet'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            int? callLogId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdCallLogCallLogIdGet(accountId, extensionId, callLogId);
            Assert.IsInstanceOf<CallLogInfo> (response, "response is CallLogInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdCallLogGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdCallLogGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdCallLogGet'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            string extensionNumber = null; // TODO: replace null with proper value
            string phoneNumber = null; // TODO: replace null with proper value
            string direction = null; // TODO: replace null with proper value
            string type = null; // TODO: replace null with proper value
            string view = null; // TODO: replace null with proper value
            bool? withRecording = null; // TODO: replace null with proper value
            DateTime? dateTo = null; // TODO: replace null with proper value
            DateTime? dateFrom = null; // TODO: replace null with proper value
            int? page = null; // TODO: replace null with proper value
            int? perPage = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdCallLogGet(accountId, extensionId, extensionNumber, phoneNumber, direction, type, view, withRecording, dateTo, dateFrom, page, perPage);
            Assert.IsInstanceOf<InlineResponseDefault2> (response, "response is InlineResponseDefault2"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPost
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPostTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPost'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            Body3 body = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdCompanyPagerPost(accountId, extensionId, body);
            Assert.IsInstanceOf<MessageInfo> (response, "response is MessageInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdFaxPost
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdFaxPostTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdFaxPost'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            Body4 body = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdFaxPost(accountId, extensionId, body);
            Assert.IsInstanceOf<MessageInfo> (response, "response is MessageInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGet'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            int? page = null; // TODO: replace null with proper value
            int? perPage = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdForwardingNumberGet(accountId, extensionId, page, perPage);
            Assert.IsInstanceOf<InlineResponseDefault5> (response, "response is InlineResponseDefault5"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdGet'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdGet(accountId, extensionId);
            Assert.IsInstanceOf<ExtensionInfo> (response, "response is ExtensionInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreGet'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            string availability = null; // TODO: replace null with proper value
            long? conversationId = null; // TODO: replace null with proper value
            DateTime? dateFrom = null; // TODO: replace null with proper value
            DateTime? dateTo = null; // TODO: replace null with proper value
            string direction = null; // TODO: replace null with proper value
            bool? distinctConversations = null; // TODO: replace null with proper value
            string messageType = null; // TODO: replace null with proper value
            string readStatus = null; // TODO: replace null with proper value
            int? page = null; // TODO: replace null with proper value
            int? perPage = null; // TODO: replace null with proper value
            string phoneNumber = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreGet(accountId, extensionId, availability, conversationId, dateFrom, dateTo, direction, distinctConversations, messageType, readStatus, page, perPage, phoneNumber);
            Assert.IsInstanceOf<InlineResponseDefault6> (response, "response is InlineResponseDefault6"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGet'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            int? messageId = null; // TODO: replace null with proper value
            int? attachmentId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdContentAttachmentIdGet(accountId, extensionId, messageId, attachmentId);
            Assert.IsInstanceOf<byte[]> (response, "response is byte[]"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDelete
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDeleteTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDelete'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            int? messageId = null; // TODO: replace null with proper value
            bool? purge = null; // TODO: replace null with proper value
            long? conversationId = null; // TODO: replace null with proper value
            
            instance.RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdDelete(accountId, extensionId, messageId, purge, conversationId);
             
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGet'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            int? messageId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdGet(accountId, extensionId, messageId);
            Assert.IsInstanceOf<MessageInfo> (response, "response is MessageInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPut
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPutTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPut'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            int? messageId = null; // TODO: replace null with proper value
            Body5 body = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdMessageStoreMessageIdPut(accountId, extensionId, messageId, body);
            Assert.IsInstanceOf<MessageInfo> (response, "response is MessageInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGet'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            string usageType = null; // TODO: replace null with proper value
            int? page = null; // TODO: replace null with proper value
            int? perPage = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdPhoneNumberGet(accountId, extensionId, usageType, page, perPage);
            Assert.IsInstanceOf<InlineResponseDefault7> (response, "response is InlineResponseDefault7"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdPresenceGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdPresenceGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdPresenceGet'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdPresenceGet(accountId, extensionId);
            Assert.IsInstanceOf<PresenceInfo> (response, "response is PresenceInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdRingoutPost
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdRingoutPostTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdRingoutPost'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            Body6 body = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdRingoutPost(accountId, extensionId, body);
            Assert.IsInstanceOf<RingOutInfo> (response, "response is RingOutInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDelete
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDeleteTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDelete'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            int? ringoutId = null; // TODO: replace null with proper value
            
            instance.RestapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdDelete(accountId, extensionId, ringoutId);
             
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGet'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            int? ringoutId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdRingoutRingoutIdGet(accountId, extensionId, ringoutId);
            Assert.IsInstanceOf<RingOutInfo> (response, "response is RingOutInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionExtensionIdSmsPost
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionExtensionIdSmsPostTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionExtensionIdSmsPost'
            string accountId = null; // TODO: replace null with proper value
            string extensionId = null; // TODO: replace null with proper value
            Body7 body = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionExtensionIdSmsPost(accountId, extensionId, body);
            Assert.IsInstanceOf<MessageInfo> (response, "response is MessageInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdExtensionGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdExtensionGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdExtensionGet'
            string accountId = null; // TODO: replace null with proper value
            int? page = null; // TODO: replace null with proper value
            int? perPage = null; // TODO: replace null with proper value
            string status = null; // TODO: replace null with proper value
            string type = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdExtensionGet(accountId, page, perPage, status, type);
            Assert.IsInstanceOf<InlineResponseDefault4> (response, "response is InlineResponseDefault4"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdGet'
            string accountId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdGet(accountId);
            Assert.IsInstanceOf<AccountInfo> (response, "response is AccountInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdPhoneNumberGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdPhoneNumberGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdPhoneNumberGet'
            string accountId = null; // TODO: replace null with proper value
            int? page = null; // TODO: replace null with proper value
            int? perPage = null; // TODO: replace null with proper value
            string usageType = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdPhoneNumberGet(accountId, page, perPage, usageType);
            Assert.IsInstanceOf<InlineResponseDefault8> (response, "response is InlineResponseDefault8"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdPhoneNumberPhoneNumberIdGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdPhoneNumberPhoneNumberIdGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdPhoneNumberPhoneNumberIdGet'
            string accountId = null; // TODO: replace null with proper value
            int? phoneNumberId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdPhoneNumberPhoneNumberIdGet(accountId, phoneNumberId);
            Assert.IsInstanceOf<PhoneNumberInfo> (response, "response is PhoneNumberInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdRecordingRecordingIdContentGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdRecordingRecordingIdContentGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdRecordingRecordingIdContentGet'
            string accountId = null; // TODO: replace null with proper value
            int? recordingId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdRecordingRecordingIdContentGet(accountId, recordingId);
            Assert.IsInstanceOf<byte[]> (response, "response is byte[]"); 
        }
        
        /// <summary>
        /// Test RestapiV10AccountAccountIdRecordingRecordingIdGet
        /// </summary>
        [Test]
        public void RestapiV10AccountAccountIdRecordingRecordingIdGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10AccountAccountIdRecordingRecordingIdGet'
            string accountId = null; // TODO: replace null with proper value
            int? recordingId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10AccountAccountIdRecordingRecordingIdGet(accountId, recordingId);
            Assert.IsInstanceOf<InlineResponseDefault9> (response, "response is InlineResponseDefault9"); 
        }
        
        /// <summary>
        /// Test RestapiV10DictionaryCountryCountryIdGet
        /// </summary>
        [Test]
        public void RestapiV10DictionaryCountryCountryIdGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10DictionaryCountryCountryIdGet'
            int? countryId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10DictionaryCountryCountryIdGet(countryId);
            Assert.IsInstanceOf<FullCountryInfo> (response, "response is FullCountryInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10DictionaryCountryGet
        /// </summary>
        [Test]
        public void RestapiV10DictionaryCountryGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10DictionaryCountryGet'
            bool? loginAllowed = null; // TODO: replace null with proper value
            bool? numberSelling = null; // TODO: replace null with proper value
            int? page = null; // TODO: replace null with proper value
            int? perPage = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10DictionaryCountryGet(loginAllowed, numberSelling, page, perPage);
            Assert.IsInstanceOf<InlineResponseDefault10> (response, "response is InlineResponseDefault10"); 
        }
        
        /// <summary>
        /// Test RestapiV10DictionaryLanguageGet
        /// </summary>
        [Test]
        public void RestapiV10DictionaryLanguageGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10DictionaryLanguageGet'
            
            var response = instance.RestapiV10DictionaryLanguageGet();
            Assert.IsInstanceOf<InlineResponseDefault11> (response, "response is InlineResponseDefault11"); 
        }
        
        /// <summary>
        /// Test RestapiV10DictionaryLanguageLanguageIdGet
        /// </summary>
        [Test]
        public void RestapiV10DictionaryLanguageLanguageIdGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10DictionaryLanguageLanguageIdGet'
            int? languageId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10DictionaryLanguageLanguageIdGet(languageId);
            Assert.IsInstanceOf<LanguageInfo> (response, "response is LanguageInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10DictionaryLocationGet
        /// </summary>
        [Test]
        public void RestapiV10DictionaryLocationGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10DictionaryLocationGet'
            string orderBy = null; // TODO: replace null with proper value
            int? page = null; // TODO: replace null with proper value
            int? perPage = null; // TODO: replace null with proper value
            string stateId = null; // TODO: replace null with proper value
            bool? withNxx = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10DictionaryLocationGet(orderBy, page, perPage, stateId, withNxx);
            Assert.IsInstanceOf<InlineResponseDefault12> (response, "response is InlineResponseDefault12"); 
        }
        
        /// <summary>
        /// Test RestapiV10DictionaryStateGet
        /// </summary>
        [Test]
        public void RestapiV10DictionaryStateGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10DictionaryStateGet'
            int? countryId = null; // TODO: replace null with proper value
            int? page = null; // TODO: replace null with proper value
            int? perPage = null; // TODO: replace null with proper value
            bool? withPhoneNumbers = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10DictionaryStateGet(countryId, page, perPage, withPhoneNumbers);
            Assert.IsInstanceOf<InlineResponseDefault13> (response, "response is InlineResponseDefault13"); 
        }
        
        /// <summary>
        /// Test RestapiV10DictionaryStateStateIdGet
        /// </summary>
        [Test]
        public void RestapiV10DictionaryStateStateIdGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10DictionaryStateStateIdGet'
            int? stateId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10DictionaryStateStateIdGet(stateId);
            Assert.IsInstanceOf<StateInfo> (response, "response is StateInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10DictionaryTimezoneGet
        /// </summary>
        [Test]
        public void RestapiV10DictionaryTimezoneGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10DictionaryTimezoneGet'
            string page = null; // TODO: replace null with proper value
            string perPage = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10DictionaryTimezoneGet(page, perPage);
            Assert.IsInstanceOf<InlineResponseDefault14> (response, "response is InlineResponseDefault14"); 
        }
        
        /// <summary>
        /// Test RestapiV10DictionaryTimezoneTimezoneIdGet
        /// </summary>
        [Test]
        public void RestapiV10DictionaryTimezoneTimezoneIdGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10DictionaryTimezoneTimezoneIdGet'
            int? timezoneId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10DictionaryTimezoneTimezoneIdGet(timezoneId);
            Assert.IsInstanceOf<TimezoneInfo> (response, "response is TimezoneInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10Get
        /// </summary>
        [Test]
        public void RestapiV10GetTest()
        {
            // TODO: add unit test for the method 'RestapiV10Get'
            
            var response = instance.RestapiV10Get();
            Assert.IsInstanceOf<VersionInfo> (response, "response is VersionInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10SubscriptionPost
        /// </summary>
        [Test]
        public void RestapiV10SubscriptionPostTest()
        {
            // TODO: add unit test for the method 'RestapiV10SubscriptionPost'
            bool? aggregated = null; // TODO: replace null with proper value
            Body8 body = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10SubscriptionPost(aggregated, body);
            Assert.IsInstanceOf<SubscriptionInfo> (response, "response is SubscriptionInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10SubscriptionSubscriptionIdDelete
        /// </summary>
        [Test]
        public void RestapiV10SubscriptionSubscriptionIdDeleteTest()
        {
            // TODO: add unit test for the method 'RestapiV10SubscriptionSubscriptionIdDelete'
            string subscriptionId = null; // TODO: replace null with proper value
            
            instance.RestapiV10SubscriptionSubscriptionIdDelete(subscriptionId);
             
        }
        
        /// <summary>
        /// Test RestapiV10SubscriptionSubscriptionIdGet
        /// </summary>
        [Test]
        public void RestapiV10SubscriptionSubscriptionIdGetTest()
        {
            // TODO: add unit test for the method 'RestapiV10SubscriptionSubscriptionIdGet'
            string subscriptionId = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10SubscriptionSubscriptionIdGet(subscriptionId);
            Assert.IsInstanceOf<SubscriptionInfo> (response, "response is SubscriptionInfo"); 
        }
        
        /// <summary>
        /// Test RestapiV10SubscriptionSubscriptionIdPut
        /// </summary>
        [Test]
        public void RestapiV10SubscriptionSubscriptionIdPutTest()
        {
            // TODO: add unit test for the method 'RestapiV10SubscriptionSubscriptionIdPut'
            string subscriptionId = null; // TODO: replace null with proper value
            bool? aggregated = null; // TODO: replace null with proper value
            Body9 body = null; // TODO: replace null with proper value
            
            var response = instance.RestapiV10SubscriptionSubscriptionIdPut(subscriptionId, aggregated, body);
            Assert.IsInstanceOf<SubscriptionInfo> (response, "response is SubscriptionInfo"); 
        }
        
    }

}
