using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Body2 :  IEquatable<Body2>
    { 
    
        /// <summary>
        /// Initializes a new instance of the <see cref="Body2" /> class.
        /// Initializes a new instance of the <see cref="Body2" />class.
        /// </summary>
        /// <param name="GrantType">Must hold password value for Resource Owner Credentials flow. If client application is not authorized by the specified grant_type, response does not contain refresh_token and refresh_token_ttl attributes.</param>
        /// <param name="AccessTokenTtl">Optional. Access token lifetime in seconds; the possible values are from 600 sec (10 min) to 3600 sec (1 hour). The default value is 3600 sec. If the value specified exceeds the default one, the default value is set. If the value specified is less than 600 seconds, the minimum value (600 sec) is set.</param>
        /// <param name="RefreshTokenTtl">Optional. Refresh token lifetime in seconds. The default value depends on the client application, but as usual it equals to 7 days. If the value specified exceeds the default one, the default value is applied. If client specifies refresh_token_ttl&lt;=0, refresh token is not returned even if the corresponding grant type is supported.</param>
        /// <param name="Username">Phone number linked to account or extension in account in E.164 format with or without leading \&quot;+\&quot; sign.</param>
        /// <param name="Extension">Optional. Extension short number. If company number is specified as a username, and extension is not specified, the server will attempt to authenticate client as main company administrator.</param>
        /// <param name="Password">User&#39;s password.</param>
        /// <param name="Scope">Optional. List of API permissions to be used with access token (see Application Permissions). Can be omitted when requesting all permissions defined during the application registration phase.</param>
        /// <param name="EndpointId">Optional. Unique identifier of a client application. You can pass it in request according to pattern [a-zA-Z0-9_\\-]{1,64}. Otherwise it is auto-generated by server. The value will be returned in response in both cases.</param>

        public Body2(string GrantType = null, int? AccessTokenTtl = null, int? RefreshTokenTtl = null, string Username = null, string Extension = null, string Password = null, string Scope = null, string EndpointId = null)
        {
            this.GrantType = GrantType;
            this.AccessTokenTtl = AccessTokenTtl;
            this.RefreshTokenTtl = RefreshTokenTtl;
            this.Username = Username;
            this.Extension = Extension;
            this.Password = Password;
            this.Scope = Scope;
            this.EndpointId = EndpointId;
            
        }
        
    
        /// <summary>
        /// Must hold password value for Resource Owner Credentials flow. If client application is not authorized by the specified grant_type, response does not contain refresh_token and refresh_token_ttl attributes
        /// </summary>
        /// <value>Must hold password value for Resource Owner Credentials flow. If client application is not authorized by the specified grant_type, response does not contain refresh_token and refresh_token_ttl attributes</value>
        [DataMember(Name="grant_type", EmitDefaultValue=false)]
        public string GrantType { get; set; }
    
        /// <summary>
        /// Optional. Access token lifetime in seconds; the possible values are from 600 sec (10 min) to 3600 sec (1 hour). The default value is 3600 sec. If the value specified exceeds the default one, the default value is set. If the value specified is less than 600 seconds, the minimum value (600 sec) is set
        /// </summary>
        /// <value>Optional. Access token lifetime in seconds; the possible values are from 600 sec (10 min) to 3600 sec (1 hour). The default value is 3600 sec. If the value specified exceeds the default one, the default value is set. If the value specified is less than 600 seconds, the minimum value (600 sec) is set</value>
        [DataMember(Name="access_token_ttl", EmitDefaultValue=false)]
        public int? AccessTokenTtl { get; set; }
    
        /// <summary>
        /// Optional. Refresh token lifetime in seconds. The default value depends on the client application, but as usual it equals to 7 days. If the value specified exceeds the default one, the default value is applied. If client specifies refresh_token_ttl&lt;=0, refresh token is not returned even if the corresponding grant type is supported
        /// </summary>
        /// <value>Optional. Refresh token lifetime in seconds. The default value depends on the client application, but as usual it equals to 7 days. If the value specified exceeds the default one, the default value is applied. If client specifies refresh_token_ttl&lt;=0, refresh token is not returned even if the corresponding grant type is supported</value>
        [DataMember(Name="refresh_token_ttl", EmitDefaultValue=false)]
        public int? RefreshTokenTtl { get; set; }
    
        /// <summary>
        /// Phone number linked to account or extension in account in E.164 format with or without leading \&quot;+\&quot; sign
        /// </summary>
        /// <value>Phone number linked to account or extension in account in E.164 format with or without leading \&quot;+\&quot; sign</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }
    
        /// <summary>
        /// Optional. Extension short number. If company number is specified as a username, and extension is not specified, the server will attempt to authenticate client as main company administrator
        /// </summary>
        /// <value>Optional. Extension short number. If company number is specified as a username, and extension is not specified, the server will attempt to authenticate client as main company administrator</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public string Extension { get; set; }
    
        /// <summary>
        /// User&#39;s password
        /// </summary>
        /// <value>User&#39;s password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
    
        /// <summary>
        /// Optional. List of API permissions to be used with access token (see Application Permissions). Can be omitted when requesting all permissions defined during the application registration phase
        /// </summary>
        /// <value>Optional. List of API permissions to be used with access token (see Application Permissions). Can be omitted when requesting all permissions defined during the application registration phase</value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }
    
        /// <summary>
        /// Optional. Unique identifier of a client application. You can pass it in request according to pattern [a-zA-Z0-9_\\-]{1,64}. Otherwise it is auto-generated by server. The value will be returned in response in both cases
        /// </summary>
        /// <value>Optional. Unique identifier of a client application. You can pass it in request according to pattern [a-zA-Z0-9_\\-]{1,64}. Otherwise it is auto-generated by server. The value will be returned in response in both cases</value>
        [DataMember(Name="endpoint_id", EmitDefaultValue=false)]
        public string EndpointId { get; set; }
    
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body2 {\n");
            sb.Append("  GrantType: ").Append(GrantType).Append("\n");
            sb.Append("  AccessTokenTtl: ").Append(AccessTokenTtl).Append("\n");
            sb.Append("  RefreshTokenTtl: ").Append(RefreshTokenTtl).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  EndpointId: ").Append(EndpointId).Append("\n");
            
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Body2);
        }

        /// <summary>
        /// Returns true if Body2 instances are equal
        /// </summary>
        /// <param name="other">Instance of Body2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body2 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.GrantType == other.GrantType ||
                    this.GrantType != null &&
                    this.GrantType.Equals(other.GrantType)
                ) && 
                (
                    this.AccessTokenTtl == other.AccessTokenTtl ||
                    this.AccessTokenTtl != null &&
                    this.AccessTokenTtl.Equals(other.AccessTokenTtl)
                ) && 
                (
                    this.RefreshTokenTtl == other.RefreshTokenTtl ||
                    this.RefreshTokenTtl != null &&
                    this.RefreshTokenTtl.Equals(other.RefreshTokenTtl)
                ) && 
                (
                    this.Username == other.Username ||
                    this.Username != null &&
                    this.Username.Equals(other.Username)
                ) && 
                (
                    this.Extension == other.Extension ||
                    this.Extension != null &&
                    this.Extension.Equals(other.Extension)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.Scope == other.Scope ||
                    this.Scope != null &&
                    this.Scope.Equals(other.Scope)
                ) && 
                (
                    this.EndpointId == other.EndpointId ||
                    this.EndpointId != null &&
                    this.EndpointId.Equals(other.EndpointId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                
                if (this.GrantType != null)
                    hash = hash * 59 + this.GrantType.GetHashCode();
                
                if (this.AccessTokenTtl != null)
                    hash = hash * 59 + this.AccessTokenTtl.GetHashCode();
                
                if (this.RefreshTokenTtl != null)
                    hash = hash * 59 + this.RefreshTokenTtl.GetHashCode();
                
                if (this.Username != null)
                    hash = hash * 59 + this.Username.GetHashCode();
                
                if (this.Extension != null)
                    hash = hash * 59 + this.Extension.GetHashCode();
                
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                
                if (this.Scope != null)
                    hash = hash * 59 + this.Scope.GetHashCode();
                
                if (this.EndpointId != null)
                    hash = hash * 59 + this.EndpointId.GetHashCode();
                
                return hash;
            }
        }

    }
}
